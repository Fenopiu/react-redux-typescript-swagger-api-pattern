{"ast":null,"code":"import _objectSpread from \"/Users/luca/Documents/GitHub/react-redux-typescript-swagger-api-pattern/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { reducerWithInitialState } from 'typescript-fsa-reducers';\n/* Import our module files */\n\nimport * as actions from './actions';\n\n/**\n * The initial store state for this module.\n */\nconst INITIAL_STATE = {\n  pets: [],\n  saving: false\n};\n/**\n * Reducer function for this module.\n */\n\nexport const reducer = reducerWithInitialState(INITIAL_STATE).case(actions.requestPets.started, state => _objectSpread({}, state, {\n  pets: []\n})).case(actions.requestPets.done, (state, {\n  result: pets\n}) => _objectSpread({}, state, {\n  pets\n})).case(actions.requestPets.failed, (state, {\n  error\n}) => _objectSpread({}, state, {\n  error\n})).case(actions.addPet.started, (state, payload) => {\n  /* Add the new pet to our state (at the start) so it appears optimistically. */\n  return _objectSpread({}, state, {\n    pets: [payload, ...state.pets],\n    saving: true,\n    error: undefined\n  });\n}).case(actions.addPet.done, (state, {\n  result\n}) => _objectSpread({}, state, {\n  saving: false\n})).case(actions.addPet.failed, (state, {\n  error\n}) => _objectSpread({}, state, {\n  saving: false,\n  error\n}));","map":{"version":3,"sources":["/Users/luca/Documents/GitHub/react-redux-typescript-swagger-api-pattern/src/modules/petstore/reducer.ts"],"names":["reducerWithInitialState","actions","INITIAL_STATE","pets","saving","reducer","case","requestPets","started","state","done","result","failed","error","addPet","payload","undefined"],"mappings":";AAAA,SAASA,uBAAT,QAAwC,yBAAxC;AAEA;;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;;AAeA;;;AAGA,MAAMC,aAAyB,GAAG;AAC9BC,EAAAA,IAAI,EAAE,EADwB;AAE9BC,EAAAA,MAAM,EAAE;AAFsB,CAAlC;AAKA;;;;AAGA,OAAO,MAAMC,OAAO,GAAGL,uBAAuB,CAACE,aAAD,CAAvB,CAClBI,IADkB,CACbL,OAAO,CAACM,WAAR,CAAoBC,OADP,EACiBC,KAAD,sBAC5BA,KAD4B;AACrBN,EAAAA,IAAI,EAAE;AADe,EADhB,EAIlBG,IAJkB,CAIbL,OAAO,CAACM,WAAR,CAAoBG,IAJP,EAIa,CAACD,KAAD,EAAQ;AAAEE,EAAAA,MAAM,EAAER;AAAV,CAAR,uBACzBM,KADyB;AAClBN,EAAAA;AADkB,EAJb,EAOlBG,IAPkB,CAObL,OAAO,CAACM,WAAR,CAAoBK,MAPP,EAOe,CAACH,KAAD,EAAQ;AAAEI,EAAAA;AAAF,CAAR,uBAC3BJ,KAD2B;AACpBI,EAAAA;AADoB,EAPf,EAUlBP,IAVkB,CAUbL,OAAO,CAACa,MAAR,CAAeN,OAVF,EAUW,CAACC,KAAD,EAAQM,OAAR,KAAoB;AAC9C;AACA,2BACON,KADP;AACcN,IAAAA,IAAI,EAAE,CAAEY,OAAF,EAAW,GAAGN,KAAK,CAACN,IAApB,CADpB;AACgDC,IAAAA,MAAM,EAAE,IADxD;AAC8DS,IAAAA,KAAK,EAAEG;AADrE;AAGH,CAfkB,EAgBlBV,IAhBkB,CAgBbL,OAAO,CAACa,MAAR,CAAeJ,IAhBF,EAgBQ,CAACD,KAAD,EAAQ;AAAEE,EAAAA;AAAF,CAAR,uBACpBF,KADoB;AACbL,EAAAA,MAAM,EAAE;AADK,EAhBR,EAmBlBE,IAnBkB,CAmBbL,OAAO,CAACa,MAAR,CAAeF,MAnBF,EAmBU,CAACH,KAAD,EAAQ;AAAEI,EAAAA;AAAF,CAAR,uBACtBJ,KADsB;AACfL,EAAAA,MAAM,EAAE,KADO;AACAS,EAAAA;AADA,EAnBV,CAAhB","sourcesContent":["import { reducerWithInitialState } from 'typescript-fsa-reducers';\n\n/* Import our module files */\nimport * as actions from './actions';\nimport { Pet } from './types';\n\n/**\n * Export the StoreState interface for this module. We always name this interface\n * `StoreState` so it is consistent across each of our modules.\n * All of the properties in the interface should be annotated `readonly`, as should\n * all of the properties down the tree.\n */\nexport interface StoreState {\n    readonly pets: ReadonlyArray<Pet>;\n    readonly error?: Error;\n    readonly saving: boolean;\n}\n\n/**\n * The initial store state for this module.\n */\nconst INITIAL_STATE: StoreState = {\n    pets: [],\n    saving: false,\n};\n\n/**\n * Reducer function for this module.\n */\nexport const reducer = reducerWithInitialState(INITIAL_STATE)\n    .case(actions.requestPets.started, (state) => ({\n        ...state, pets: [],\n    }))\n    .case(actions.requestPets.done, (state, { result: pets }) => ({\n        ...state, pets,\n    }))\n    .case(actions.requestPets.failed, (state, { error }) => ({\n        ...state, error,\n    }))\n    .case(actions.addPet.started, (state, payload) => {\n        /* Add the new pet to our state (at the start) so it appears optimistically. */\n        return {\n            ...state, pets: [ payload, ...state.pets ], saving: true, error: undefined,\n        };\n    })\n    .case(actions.addPet.done, (state, { result }) => ({\n        ...state, saving: false,\n    }))\n    .case(actions.addPet.failed, (state, { error }) => ({\n        ...state, saving: false, error,\n    }))\n    ;\n"]},"metadata":{},"sourceType":"module"}