{"ast":null,"code":"/**\n * Swagger Petstore\n * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n *\n * OpenAPI spec version: 1.0.0\n * Contact: apiteam@swagger.io\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar querystring = require(\"querystring\");\n\nvar url = require(\"url\");\n\nvar isomorphicFetch = require(\"isomorphic-fetch\");\n\nvar assign = require(\"core-js/library/fn/object/assign\");\n\nvar BASE_PATH = \"http://petstore.swagger.io/v2\".replace(/\\/+$/, \"\");\n\nvar BaseAPI = function () {\n  function BaseAPI(fetch, basePath) {\n    if (fetch === void 0) {\n      fetch = isomorphicFetch;\n    }\n\n    if (basePath === void 0) {\n      basePath = BASE_PATH;\n    }\n\n    this.basePath = basePath;\n    this.fetch = fetch;\n  }\n\n  return BaseAPI;\n}();\n\nexports.BaseAPI = BaseAPI;\n;\n/**\n * PetApi - fetch parameter creator\n */\n\nexports.PetApiFetchParamCreator = {\n  /**\n   *\n   * @summary Add a new pet to the store\n   * @param body Pet object that needs to be added to the store\n   */\n  addPet: function (params, options) {\n    // verify required parameter \"body\" is set\n    if (params[\"body\"] == null) {\n      throw new Error(\"Missing required parameter body when calling addPet\");\n    }\n\n    var baseUrl = \"/pet\";\n    var urlObj = url.parse(baseUrl, true);\n    var fetchOptions = assign({}, {\n      method: \"POST\"\n    }, options);\n    var contentTypeHeader = {};\n    contentTypeHeader = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    if (params[\"body\"]) {\n      fetchOptions.body = JSON.stringify(params[\"body\"] || {});\n    }\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  },\n\n  /**\n   *\n   * @summary Deletes a pet\n   * @param petId Pet id to delete\n   * @param apiKey\n   */\n  deletePet: function (params, options) {\n    // verify required parameter \"petId\" is set\n    if (params[\"petId\"] == null) {\n      throw new Error(\"Missing required parameter petId when calling deletePet\");\n    }\n\n    var baseUrl = \"/pet/{petId}\".replace(\"{\" + \"petId\" + \"}\", \"\" + params[\"petId\"]);\n    var urlObj = url.parse(baseUrl, true);\n    var fetchOptions = assign({}, {\n      method: \"DELETE\"\n    }, options);\n    var contentTypeHeader = {};\n    fetchOptions.headers = assign({\n      \"api_key\": params[\"apiKey\"]\n    }, contentTypeHeader, fetchOptions.headers);\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  },\n\n  /**\n   * Multiple status values can be provided with comma separated strings\n   * @summary Finds Pets by status\n   * @param status Status values that need to be considered for filter\n   */\n  findPetsByStatus: function (params, options) {\n    // verify required parameter \"status\" is set\n    if (params[\"status\"] == null) {\n      throw new Error(\"Missing required parameter status when calling findPetsByStatus\");\n    }\n\n    var baseUrl = \"/pet/findByStatus\";\n    var urlObj = url.parse(baseUrl, true);\n    urlObj.query = assign({}, urlObj.query, {\n      \"status\": params[\"status\"]\n    });\n    var fetchOptions = assign({}, {\n      method: \"GET\"\n    }, options);\n    var contentTypeHeader = {};\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  },\n\n  /**\n   * Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n   * @summary Finds Pets by tags\n   * @param tags Tags to filter by\n   */\n  findPetsByTags: function (params, options) {\n    // verify required parameter \"tags\" is set\n    if (params[\"tags\"] == null) {\n      throw new Error(\"Missing required parameter tags when calling findPetsByTags\");\n    }\n\n    var baseUrl = \"/pet/findByTags\";\n    var urlObj = url.parse(baseUrl, true);\n    urlObj.query = assign({}, urlObj.query, {\n      \"tags\": params[\"tags\"]\n    });\n    var fetchOptions = assign({}, {\n      method: \"GET\"\n    }, options);\n    var contentTypeHeader = {};\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  },\n\n  /**\n   * Returns a single pet\n   * @summary Find pet by ID\n   * @param petId ID of pet to return\n   */\n  getPetById: function (params, options) {\n    // verify required parameter \"petId\" is set\n    if (params[\"petId\"] == null) {\n      throw new Error(\"Missing required parameter petId when calling getPetById\");\n    }\n\n    var baseUrl = \"/pet/{petId}\".replace(\"{\" + \"petId\" + \"}\", \"\" + params[\"petId\"]);\n    var urlObj = url.parse(baseUrl, true);\n    var fetchOptions = assign({}, {\n      method: \"GET\"\n    }, options);\n    var contentTypeHeader = {};\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  },\n\n  /**\n   *\n   * @summary Update an existing pet\n   * @param body Pet object that needs to be added to the store\n   */\n  updatePet: function (params, options) {\n    // verify required parameter \"body\" is set\n    if (params[\"body\"] == null) {\n      throw new Error(\"Missing required parameter body when calling updatePet\");\n    }\n\n    var baseUrl = \"/pet\";\n    var urlObj = url.parse(baseUrl, true);\n    var fetchOptions = assign({}, {\n      method: \"PUT\"\n    }, options);\n    var contentTypeHeader = {};\n    contentTypeHeader = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    if (params[\"body\"]) {\n      fetchOptions.body = JSON.stringify(params[\"body\"] || {});\n    }\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  },\n\n  /**\n   *\n   * @summary Updates a pet in the store with form data\n   * @param petId ID of pet that needs to be updated\n   * @param name Updated name of the pet\n   * @param status Updated status of the pet\n   */\n  updatePetWithForm: function (params, options) {\n    // verify required parameter \"petId\" is set\n    if (params[\"petId\"] == null) {\n      throw new Error(\"Missing required parameter petId when calling updatePetWithForm\");\n    }\n\n    var baseUrl = \"/pet/{petId}\".replace(\"{\" + \"petId\" + \"}\", \"\" + params[\"petId\"]);\n    var urlObj = url.parse(baseUrl, true);\n    var fetchOptions = assign({}, {\n      method: \"POST\"\n    }, options);\n    var contentTypeHeader = {};\n    contentTypeHeader = {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    };\n    fetchOptions.body = querystring.stringify({\n      \"name\": params[\"name\"],\n      \"status\": params[\"status\"]\n    });\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  },\n\n  /**\n   *\n   * @summary uploads an image\n   * @param petId ID of pet to update\n   * @param additionalMetadata Additional data to pass to server\n   * @param file file to upload\n   */\n  uploadFile: function (params, options) {\n    // verify required parameter \"petId\" is set\n    if (params[\"petId\"] == null) {\n      throw new Error(\"Missing required parameter petId when calling uploadFile\");\n    }\n\n    var baseUrl = \"/pet/{petId}/uploadImage\".replace(\"{\" + \"petId\" + \"}\", \"\" + params[\"petId\"]);\n    var urlObj = url.parse(baseUrl, true);\n    var fetchOptions = assign({}, {\n      method: \"POST\"\n    }, options);\n    var contentTypeHeader = {};\n    contentTypeHeader = {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    };\n    fetchOptions.body = querystring.stringify({\n      \"additionalMetadata\": params[\"additionalMetadata\"],\n      \"file\": params[\"file\"]\n    });\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  }\n};\n/**\n * PetApi - functional programming interface\n */\n\nexports.PetApiFp = {\n  /**\n   *\n   * @summary Add a new pet to the store\n   * @param body Pet object that needs to be added to the store\n   */\n  addPet: function (params, options) {\n    var fetchArgs = exports.PetApiFetchParamCreator.addPet(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response;\n        } else {\n          throw response;\n        }\n      });\n    };\n  },\n\n  /**\n   *\n   * @summary Deletes a pet\n   * @param petId Pet id to delete\n   * @param apiKey\n   */\n  deletePet: function (params, options) {\n    var fetchArgs = exports.PetApiFetchParamCreator.deletePet(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response;\n        } else {\n          throw response;\n        }\n      });\n    };\n  },\n\n  /**\n   * Multiple status values can be provided with comma separated strings\n   * @summary Finds Pets by status\n   * @param status Status values that need to be considered for filter\n   */\n  findPetsByStatus: function (params, options) {\n    var fetchArgs = exports.PetApiFetchParamCreator.findPetsByStatus(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response.json();\n        } else {\n          throw response;\n        }\n      });\n    };\n  },\n\n  /**\n   * Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n   * @summary Finds Pets by tags\n   * @param tags Tags to filter by\n   */\n  findPetsByTags: function (params, options) {\n    var fetchArgs = exports.PetApiFetchParamCreator.findPetsByTags(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response.json();\n        } else {\n          throw response;\n        }\n      });\n    };\n  },\n\n  /**\n   * Returns a single pet\n   * @summary Find pet by ID\n   * @param petId ID of pet to return\n   */\n  getPetById: function (params, options) {\n    var fetchArgs = exports.PetApiFetchParamCreator.getPetById(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response.json();\n        } else {\n          throw response;\n        }\n      });\n    };\n  },\n\n  /**\n   *\n   * @summary Update an existing pet\n   * @param body Pet object that needs to be added to the store\n   */\n  updatePet: function (params, options) {\n    var fetchArgs = exports.PetApiFetchParamCreator.updatePet(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response;\n        } else {\n          throw response;\n        }\n      });\n    };\n  },\n\n  /**\n   *\n   * @summary Updates a pet in the store with form data\n   * @param petId ID of pet that needs to be updated\n   * @param name Updated name of the pet\n   * @param status Updated status of the pet\n   */\n  updatePetWithForm: function (params, options) {\n    var fetchArgs = exports.PetApiFetchParamCreator.updatePetWithForm(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response;\n        } else {\n          throw response;\n        }\n      });\n    };\n  },\n\n  /**\n   *\n   * @summary uploads an image\n   * @param petId ID of pet to update\n   * @param additionalMetadata Additional data to pass to server\n   * @param file file to upload\n   */\n  uploadFile: function (params, options) {\n    var fetchArgs = exports.PetApiFetchParamCreator.uploadFile(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response.json();\n        } else {\n          throw response;\n        }\n      });\n    };\n  }\n};\n/**\n * PetApi - object-oriented interface\n */\n\nvar PetApi = function (_super) {\n  __extends(PetApi, _super);\n\n  function PetApi() {\n    _super.apply(this, arguments);\n  }\n  /**\n   *\n   * @summary Add a new pet to the store\n   * @param body Pet object that needs to be added to the store\n   */\n\n\n  PetApi.prototype.addPet = function (params, options) {\n    return exports.PetApiFp.addPet(params, options)(this.fetch, this.basePath);\n  };\n  /**\n   *\n   * @summary Deletes a pet\n   * @param petId Pet id to delete\n   * @param apiKey\n   */\n\n\n  PetApi.prototype.deletePet = function (params, options) {\n    return exports.PetApiFp.deletePet(params, options)(this.fetch, this.basePath);\n  };\n  /**\n   * Multiple status values can be provided with comma separated strings\n   * @summary Finds Pets by status\n   * @param status Status values that need to be considered for filter\n   */\n\n\n  PetApi.prototype.findPetsByStatus = function (params, options) {\n    return exports.PetApiFp.findPetsByStatus(params, options)(this.fetch, this.basePath);\n  };\n  /**\n   * Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n   * @summary Finds Pets by tags\n   * @param tags Tags to filter by\n   */\n\n\n  PetApi.prototype.findPetsByTags = function (params, options) {\n    return exports.PetApiFp.findPetsByTags(params, options)(this.fetch, this.basePath);\n  };\n  /**\n   * Returns a single pet\n   * @summary Find pet by ID\n   * @param petId ID of pet to return\n   */\n\n\n  PetApi.prototype.getPetById = function (params, options) {\n    return exports.PetApiFp.getPetById(params, options)(this.fetch, this.basePath);\n  };\n  /**\n   *\n   * @summary Update an existing pet\n   * @param body Pet object that needs to be added to the store\n   */\n\n\n  PetApi.prototype.updatePet = function (params, options) {\n    return exports.PetApiFp.updatePet(params, options)(this.fetch, this.basePath);\n  };\n  /**\n   *\n   * @summary Updates a pet in the store with form data\n   * @param petId ID of pet that needs to be updated\n   * @param name Updated name of the pet\n   * @param status Updated status of the pet\n   */\n\n\n  PetApi.prototype.updatePetWithForm = function (params, options) {\n    return exports.PetApiFp.updatePetWithForm(params, options)(this.fetch, this.basePath);\n  };\n  /**\n   *\n   * @summary uploads an image\n   * @param petId ID of pet to update\n   * @param additionalMetadata Additional data to pass to server\n   * @param file file to upload\n   */\n\n\n  PetApi.prototype.uploadFile = function (params, options) {\n    return exports.PetApiFp.uploadFile(params, options)(this.fetch, this.basePath);\n  };\n\n  return PetApi;\n}(BaseAPI);\n\nexports.PetApi = PetApi;\n;\n/**\n * PetApi - factory interface\n */\n\nexports.PetApiFactory = function (fetch, basePath) {\n  return {\n    /**\n     *\n     * @summary Add a new pet to the store\n     * @param body Pet object that needs to be added to the store\n     */\n    addPet: function (params, options) {\n      return exports.PetApiFp.addPet(params, options)(fetch, basePath);\n    },\n\n    /**\n     *\n     * @summary Deletes a pet\n     * @param petId Pet id to delete\n     * @param apiKey\n     */\n    deletePet: function (params, options) {\n      return exports.PetApiFp.deletePet(params, options)(fetch, basePath);\n    },\n\n    /**\n     * Multiple status values can be provided with comma separated strings\n     * @summary Finds Pets by status\n     * @param status Status values that need to be considered for filter\n     */\n    findPetsByStatus: function (params, options) {\n      return exports.PetApiFp.findPetsByStatus(params, options)(fetch, basePath);\n    },\n\n    /**\n     * Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n     * @summary Finds Pets by tags\n     * @param tags Tags to filter by\n     */\n    findPetsByTags: function (params, options) {\n      return exports.PetApiFp.findPetsByTags(params, options)(fetch, basePath);\n    },\n\n    /**\n     * Returns a single pet\n     * @summary Find pet by ID\n     * @param petId ID of pet to return\n     */\n    getPetById: function (params, options) {\n      return exports.PetApiFp.getPetById(params, options)(fetch, basePath);\n    },\n\n    /**\n     *\n     * @summary Update an existing pet\n     * @param body Pet object that needs to be added to the store\n     */\n    updatePet: function (params, options) {\n      return exports.PetApiFp.updatePet(params, options)(fetch, basePath);\n    },\n\n    /**\n     *\n     * @summary Updates a pet in the store with form data\n     * @param petId ID of pet that needs to be updated\n     * @param name Updated name of the pet\n     * @param status Updated status of the pet\n     */\n    updatePetWithForm: function (params, options) {\n      return exports.PetApiFp.updatePetWithForm(params, options)(fetch, basePath);\n    },\n\n    /**\n     *\n     * @summary uploads an image\n     * @param petId ID of pet to update\n     * @param additionalMetadata Additional data to pass to server\n     * @param file file to upload\n     */\n    uploadFile: function (params, options) {\n      return exports.PetApiFp.uploadFile(params, options)(fetch, basePath);\n    }\n  };\n};\n/**\n * StoreApi - fetch parameter creator\n */\n\n\nexports.StoreApiFetchParamCreator = {\n  /**\n   * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\n   * @summary Delete purchase order by ID\n   * @param orderId ID of the order that needs to be deleted\n   */\n  deleteOrder: function (params, options) {\n    // verify required parameter \"orderId\" is set\n    if (params[\"orderId\"] == null) {\n      throw new Error(\"Missing required parameter orderId when calling deleteOrder\");\n    }\n\n    var baseUrl = \"/store/order/{orderId}\".replace(\"{\" + \"orderId\" + \"}\", \"\" + params[\"orderId\"]);\n    var urlObj = url.parse(baseUrl, true);\n    var fetchOptions = assign({}, {\n      method: \"DELETE\"\n    }, options);\n    var contentTypeHeader = {};\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  },\n\n  /**\n   * Returns a map of status codes to quantities\n   * @summary Returns pet inventories by status\n   */\n  getInventory: function (options) {\n    var baseUrl = \"/store/inventory\";\n    var urlObj = url.parse(baseUrl, true);\n    var fetchOptions = assign({}, {\n      method: \"GET\"\n    }, options);\n    var contentTypeHeader = {};\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  },\n\n  /**\n   * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\n   * @summary Find purchase order by ID\n   * @param orderId ID of pet that needs to be fetched\n   */\n  getOrderById: function (params, options) {\n    // verify required parameter \"orderId\" is set\n    if (params[\"orderId\"] == null) {\n      throw new Error(\"Missing required parameter orderId when calling getOrderById\");\n    }\n\n    var baseUrl = \"/store/order/{orderId}\".replace(\"{\" + \"orderId\" + \"}\", \"\" + params[\"orderId\"]);\n    var urlObj = url.parse(baseUrl, true);\n    var fetchOptions = assign({}, {\n      method: \"GET\"\n    }, options);\n    var contentTypeHeader = {};\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  },\n\n  /**\n   *\n   * @summary Place an order for a pet\n   * @param body order placed for purchasing the pet\n   */\n  placeOrder: function (params, options) {\n    // verify required parameter \"body\" is set\n    if (params[\"body\"] == null) {\n      throw new Error(\"Missing required parameter body when calling placeOrder\");\n    }\n\n    var baseUrl = \"/store/order\";\n    var urlObj = url.parse(baseUrl, true);\n    var fetchOptions = assign({}, {\n      method: \"POST\"\n    }, options);\n    var contentTypeHeader = {};\n    contentTypeHeader = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    if (params[\"body\"]) {\n      fetchOptions.body = JSON.stringify(params[\"body\"] || {});\n    }\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  }\n};\n/**\n * StoreApi - functional programming interface\n */\n\nexports.StoreApiFp = {\n  /**\n   * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\n   * @summary Delete purchase order by ID\n   * @param orderId ID of the order that needs to be deleted\n   */\n  deleteOrder: function (params, options) {\n    var fetchArgs = exports.StoreApiFetchParamCreator.deleteOrder(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response;\n        } else {\n          throw response;\n        }\n      });\n    };\n  },\n\n  /**\n   * Returns a map of status codes to quantities\n   * @summary Returns pet inventories by status\n   */\n  getInventory: function (options) {\n    var fetchArgs = exports.StoreApiFetchParamCreator.getInventory(options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response.json();\n        } else {\n          throw response;\n        }\n      });\n    };\n  },\n\n  /**\n   * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\n   * @summary Find purchase order by ID\n   * @param orderId ID of pet that needs to be fetched\n   */\n  getOrderById: function (params, options) {\n    var fetchArgs = exports.StoreApiFetchParamCreator.getOrderById(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response.json();\n        } else {\n          throw response;\n        }\n      });\n    };\n  },\n\n  /**\n   *\n   * @summary Place an order for a pet\n   * @param body order placed for purchasing the pet\n   */\n  placeOrder: function (params, options) {\n    var fetchArgs = exports.StoreApiFetchParamCreator.placeOrder(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response.json();\n        } else {\n          throw response;\n        }\n      });\n    };\n  }\n};\n/**\n * StoreApi - object-oriented interface\n */\n\nvar StoreApi = function (_super) {\n  __extends(StoreApi, _super);\n\n  function StoreApi() {\n    _super.apply(this, arguments);\n  }\n  /**\n   * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\n   * @summary Delete purchase order by ID\n   * @param orderId ID of the order that needs to be deleted\n   */\n\n\n  StoreApi.prototype.deleteOrder = function (params, options) {\n    return exports.StoreApiFp.deleteOrder(params, options)(this.fetch, this.basePath);\n  };\n  /**\n   * Returns a map of status codes to quantities\n   * @summary Returns pet inventories by status\n   */\n\n\n  StoreApi.prototype.getInventory = function (options) {\n    return exports.StoreApiFp.getInventory(options)(this.fetch, this.basePath);\n  };\n  /**\n   * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\n   * @summary Find purchase order by ID\n   * @param orderId ID of pet that needs to be fetched\n   */\n\n\n  StoreApi.prototype.getOrderById = function (params, options) {\n    return exports.StoreApiFp.getOrderById(params, options)(this.fetch, this.basePath);\n  };\n  /**\n   *\n   * @summary Place an order for a pet\n   * @param body order placed for purchasing the pet\n   */\n\n\n  StoreApi.prototype.placeOrder = function (params, options) {\n    return exports.StoreApiFp.placeOrder(params, options)(this.fetch, this.basePath);\n  };\n\n  return StoreApi;\n}(BaseAPI);\n\nexports.StoreApi = StoreApi;\n;\n/**\n * StoreApi - factory interface\n */\n\nexports.StoreApiFactory = function (fetch, basePath) {\n  return {\n    /**\n     * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\n     * @summary Delete purchase order by ID\n     * @param orderId ID of the order that needs to be deleted\n     */\n    deleteOrder: function (params, options) {\n      return exports.StoreApiFp.deleteOrder(params, options)(fetch, basePath);\n    },\n\n    /**\n     * Returns a map of status codes to quantities\n     * @summary Returns pet inventories by status\n     */\n    getInventory: function (options) {\n      return exports.StoreApiFp.getInventory(options)(fetch, basePath);\n    },\n\n    /**\n     * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\n     * @summary Find purchase order by ID\n     * @param orderId ID of pet that needs to be fetched\n     */\n    getOrderById: function (params, options) {\n      return exports.StoreApiFp.getOrderById(params, options)(fetch, basePath);\n    },\n\n    /**\n     *\n     * @summary Place an order for a pet\n     * @param body order placed for purchasing the pet\n     */\n    placeOrder: function (params, options) {\n      return exports.StoreApiFp.placeOrder(params, options)(fetch, basePath);\n    }\n  };\n};\n/**\n * UserApi - fetch parameter creator\n */\n\n\nexports.UserApiFetchParamCreator = {\n  /**\n   * This can only be done by the logged in user.\n   * @summary Create user\n   * @param body Created user object\n   */\n  createUser: function (params, options) {\n    // verify required parameter \"body\" is set\n    if (params[\"body\"] == null) {\n      throw new Error(\"Missing required parameter body when calling createUser\");\n    }\n\n    var baseUrl = \"/user\";\n    var urlObj = url.parse(baseUrl, true);\n    var fetchOptions = assign({}, {\n      method: \"POST\"\n    }, options);\n    var contentTypeHeader = {};\n    contentTypeHeader = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    if (params[\"body\"]) {\n      fetchOptions.body = JSON.stringify(params[\"body\"] || {});\n    }\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  },\n\n  /**\n   *\n   * @summary Creates list of users with given input array\n   * @param body List of user object\n   */\n  createUsersWithArrayInput: function (params, options) {\n    // verify required parameter \"body\" is set\n    if (params[\"body\"] == null) {\n      throw new Error(\"Missing required parameter body when calling createUsersWithArrayInput\");\n    }\n\n    var baseUrl = \"/user/createWithArray\";\n    var urlObj = url.parse(baseUrl, true);\n    var fetchOptions = assign({}, {\n      method: \"POST\"\n    }, options);\n    var contentTypeHeader = {};\n    contentTypeHeader = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    if (params[\"body\"]) {\n      fetchOptions.body = JSON.stringify(params[\"body\"] || {});\n    }\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  },\n\n  /**\n   *\n   * @summary Creates list of users with given input array\n   * @param body List of user object\n   */\n  createUsersWithListInput: function (params, options) {\n    // verify required parameter \"body\" is set\n    if (params[\"body\"] == null) {\n      throw new Error(\"Missing required parameter body when calling createUsersWithListInput\");\n    }\n\n    var baseUrl = \"/user/createWithList\";\n    var urlObj = url.parse(baseUrl, true);\n    var fetchOptions = assign({}, {\n      method: \"POST\"\n    }, options);\n    var contentTypeHeader = {};\n    contentTypeHeader = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    if (params[\"body\"]) {\n      fetchOptions.body = JSON.stringify(params[\"body\"] || {});\n    }\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  },\n\n  /**\n   * This can only be done by the logged in user.\n   * @summary Delete user\n   * @param username The name that needs to be deleted\n   */\n  deleteUser: function (params, options) {\n    // verify required parameter \"username\" is set\n    if (params[\"username\"] == null) {\n      throw new Error(\"Missing required parameter username when calling deleteUser\");\n    }\n\n    var baseUrl = \"/user/{username}\".replace(\"{\" + \"username\" + \"}\", \"\" + params[\"username\"]);\n    var urlObj = url.parse(baseUrl, true);\n    var fetchOptions = assign({}, {\n      method: \"DELETE\"\n    }, options);\n    var contentTypeHeader = {};\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  },\n\n  /**\n   *\n   * @summary Get user by user name\n   * @param username The name that needs to be fetched. Use user1 for testing.\n   */\n  getUserByName: function (params, options) {\n    // verify required parameter \"username\" is set\n    if (params[\"username\"] == null) {\n      throw new Error(\"Missing required parameter username when calling getUserByName\");\n    }\n\n    var baseUrl = \"/user/{username}\".replace(\"{\" + \"username\" + \"}\", \"\" + params[\"username\"]);\n    var urlObj = url.parse(baseUrl, true);\n    var fetchOptions = assign({}, {\n      method: \"GET\"\n    }, options);\n    var contentTypeHeader = {};\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  },\n\n  /**\n   *\n   * @summary Logs user into the system\n   * @param username The user name for login\n   * @param password The password for login in clear text\n   */\n  loginUser: function (params, options) {\n    // verify required parameter \"username\" is set\n    if (params[\"username\"] == null) {\n      throw new Error(\"Missing required parameter username when calling loginUser\");\n    } // verify required parameter \"password\" is set\n\n\n    if (params[\"password\"] == null) {\n      throw new Error(\"Missing required parameter password when calling loginUser\");\n    }\n\n    var baseUrl = \"/user/login\";\n    var urlObj = url.parse(baseUrl, true);\n    urlObj.query = assign({}, urlObj.query, {\n      \"username\": params[\"username\"],\n      \"password\": params[\"password\"]\n    });\n    var fetchOptions = assign({}, {\n      method: \"GET\"\n    }, options);\n    var contentTypeHeader = {};\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  },\n\n  /**\n   *\n   * @summary Logs out current logged in user session\n   */\n  logoutUser: function (options) {\n    var baseUrl = \"/user/logout\";\n    var urlObj = url.parse(baseUrl, true);\n    var fetchOptions = assign({}, {\n      method: \"GET\"\n    }, options);\n    var contentTypeHeader = {};\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  },\n\n  /**\n   * This can only be done by the logged in user.\n   * @summary Updated user\n   * @param username name that need to be updated\n   * @param body Updated user object\n   */\n  updateUser: function (params, options) {\n    // verify required parameter \"username\" is set\n    if (params[\"username\"] == null) {\n      throw new Error(\"Missing required parameter username when calling updateUser\");\n    } // verify required parameter \"body\" is set\n\n\n    if (params[\"body\"] == null) {\n      throw new Error(\"Missing required parameter body when calling updateUser\");\n    }\n\n    var baseUrl = \"/user/{username}\".replace(\"{\" + \"username\" + \"}\", \"\" + params[\"username\"]);\n    var urlObj = url.parse(baseUrl, true);\n    var fetchOptions = assign({}, {\n      method: \"PUT\"\n    }, options);\n    var contentTypeHeader = {};\n    contentTypeHeader = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    if (params[\"body\"]) {\n      fetchOptions.body = JSON.stringify(params[\"body\"] || {});\n    }\n\n    if (contentTypeHeader) {\n      fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);\n    }\n\n    return {\n      url: url.format(urlObj),\n      options: fetchOptions\n    };\n  }\n};\n/**\n * UserApi - functional programming interface\n */\n\nexports.UserApiFp = {\n  /**\n   * This can only be done by the logged in user.\n   * @summary Create user\n   * @param body Created user object\n   */\n  createUser: function (params, options) {\n    var fetchArgs = exports.UserApiFetchParamCreator.createUser(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response;\n        } else {\n          throw response;\n        }\n      });\n    };\n  },\n\n  /**\n   *\n   * @summary Creates list of users with given input array\n   * @param body List of user object\n   */\n  createUsersWithArrayInput: function (params, options) {\n    var fetchArgs = exports.UserApiFetchParamCreator.createUsersWithArrayInput(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response;\n        } else {\n          throw response;\n        }\n      });\n    };\n  },\n\n  /**\n   *\n   * @summary Creates list of users with given input array\n   * @param body List of user object\n   */\n  createUsersWithListInput: function (params, options) {\n    var fetchArgs = exports.UserApiFetchParamCreator.createUsersWithListInput(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response;\n        } else {\n          throw response;\n        }\n      });\n    };\n  },\n\n  /**\n   * This can only be done by the logged in user.\n   * @summary Delete user\n   * @param username The name that needs to be deleted\n   */\n  deleteUser: function (params, options) {\n    var fetchArgs = exports.UserApiFetchParamCreator.deleteUser(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response;\n        } else {\n          throw response;\n        }\n      });\n    };\n  },\n\n  /**\n   *\n   * @summary Get user by user name\n   * @param username The name that needs to be fetched. Use user1 for testing.\n   */\n  getUserByName: function (params, options) {\n    var fetchArgs = exports.UserApiFetchParamCreator.getUserByName(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response.json();\n        } else {\n          throw response;\n        }\n      });\n    };\n  },\n\n  /**\n   *\n   * @summary Logs user into the system\n   * @param username The user name for login\n   * @param password The password for login in clear text\n   */\n  loginUser: function (params, options) {\n    var fetchArgs = exports.UserApiFetchParamCreator.loginUser(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response.json();\n        } else {\n          throw response;\n        }\n      });\n    };\n  },\n\n  /**\n   *\n   * @summary Logs out current logged in user session\n   */\n  logoutUser: function (options) {\n    var fetchArgs = exports.UserApiFetchParamCreator.logoutUser(options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response;\n        } else {\n          throw response;\n        }\n      });\n    };\n  },\n\n  /**\n   * This can only be done by the logged in user.\n   * @summary Updated user\n   * @param username name that need to be updated\n   * @param body Updated user object\n   */\n  updateUser: function (params, options) {\n    var fetchArgs = exports.UserApiFetchParamCreator.updateUser(params, options);\n    return function (fetch, basePath) {\n      if (fetch === void 0) {\n        fetch = isomorphicFetch;\n      }\n\n      if (basePath === void 0) {\n        basePath = BASE_PATH;\n      }\n\n      return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {\n        if (response.status >= 200 && response.status < 300) {\n          return response;\n        } else {\n          throw response;\n        }\n      });\n    };\n  }\n};\n/**\n * UserApi - object-oriented interface\n */\n\nvar UserApi = function (_super) {\n  __extends(UserApi, _super);\n\n  function UserApi() {\n    _super.apply(this, arguments);\n  }\n  /**\n   * This can only be done by the logged in user.\n   * @summary Create user\n   * @param body Created user object\n   */\n\n\n  UserApi.prototype.createUser = function (params, options) {\n    return exports.UserApiFp.createUser(params, options)(this.fetch, this.basePath);\n  };\n  /**\n   *\n   * @summary Creates list of users with given input array\n   * @param body List of user object\n   */\n\n\n  UserApi.prototype.createUsersWithArrayInput = function (params, options) {\n    return exports.UserApiFp.createUsersWithArrayInput(params, options)(this.fetch, this.basePath);\n  };\n  /**\n   *\n   * @summary Creates list of users with given input array\n   * @param body List of user object\n   */\n\n\n  UserApi.prototype.createUsersWithListInput = function (params, options) {\n    return exports.UserApiFp.createUsersWithListInput(params, options)(this.fetch, this.basePath);\n  };\n  /**\n   * This can only be done by the logged in user.\n   * @summary Delete user\n   * @param username The name that needs to be deleted\n   */\n\n\n  UserApi.prototype.deleteUser = function (params, options) {\n    return exports.UserApiFp.deleteUser(params, options)(this.fetch, this.basePath);\n  };\n  /**\n   *\n   * @summary Get user by user name\n   * @param username The name that needs to be fetched. Use user1 for testing.\n   */\n\n\n  UserApi.prototype.getUserByName = function (params, options) {\n    return exports.UserApiFp.getUserByName(params, options)(this.fetch, this.basePath);\n  };\n  /**\n   *\n   * @summary Logs user into the system\n   * @param username The user name for login\n   * @param password The password for login in clear text\n   */\n\n\n  UserApi.prototype.loginUser = function (params, options) {\n    return exports.UserApiFp.loginUser(params, options)(this.fetch, this.basePath);\n  };\n  /**\n   *\n   * @summary Logs out current logged in user session\n   */\n\n\n  UserApi.prototype.logoutUser = function (options) {\n    return exports.UserApiFp.logoutUser(options)(this.fetch, this.basePath);\n  };\n  /**\n   * This can only be done by the logged in user.\n   * @summary Updated user\n   * @param username name that need to be updated\n   * @param body Updated user object\n   */\n\n\n  UserApi.prototype.updateUser = function (params, options) {\n    return exports.UserApiFp.updateUser(params, options)(this.fetch, this.basePath);\n  };\n\n  return UserApi;\n}(BaseAPI);\n\nexports.UserApi = UserApi;\n;\n/**\n * UserApi - factory interface\n */\n\nexports.UserApiFactory = function (fetch, basePath) {\n  return {\n    /**\n     * This can only be done by the logged in user.\n     * @summary Create user\n     * @param body Created user object\n     */\n    createUser: function (params, options) {\n      return exports.UserApiFp.createUser(params, options)(fetch, basePath);\n    },\n\n    /**\n     *\n     * @summary Creates list of users with given input array\n     * @param body List of user object\n     */\n    createUsersWithArrayInput: function (params, options) {\n      return exports.UserApiFp.createUsersWithArrayInput(params, options)(fetch, basePath);\n    },\n\n    /**\n     *\n     * @summary Creates list of users with given input array\n     * @param body List of user object\n     */\n    createUsersWithListInput: function (params, options) {\n      return exports.UserApiFp.createUsersWithListInput(params, options)(fetch, basePath);\n    },\n\n    /**\n     * This can only be done by the logged in user.\n     * @summary Delete user\n     * @param username The name that needs to be deleted\n     */\n    deleteUser: function (params, options) {\n      return exports.UserApiFp.deleteUser(params, options)(fetch, basePath);\n    },\n\n    /**\n     *\n     * @summary Get user by user name\n     * @param username The name that needs to be fetched. Use user1 for testing.\n     */\n    getUserByName: function (params, options) {\n      return exports.UserApiFp.getUserByName(params, options)(fetch, basePath);\n    },\n\n    /**\n     *\n     * @summary Logs user into the system\n     * @param username The user name for login\n     * @param password The password for login in clear text\n     */\n    loginUser: function (params, options) {\n      return exports.UserApiFp.loginUser(params, options)(fetch, basePath);\n    },\n\n    /**\n     *\n     * @summary Logs out current logged in user session\n     */\n    logoutUser: function (options) {\n      return exports.UserApiFp.logoutUser(options)(fetch, basePath);\n    },\n\n    /**\n     * This can only be done by the logged in user.\n     * @summary Updated user\n     * @param username name that need to be updated\n     * @param body Updated user object\n     */\n    updateUser: function (params, options) {\n      return exports.UserApiFp.updateUser(params, options)(fetch, basePath);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}