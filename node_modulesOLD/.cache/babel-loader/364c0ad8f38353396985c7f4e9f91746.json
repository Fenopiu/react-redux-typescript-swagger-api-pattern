{"ast":null,"code":"/**\n * Authentication sagas.\n * \n * Responsible for the process of logging in, refreshing tokens and logging out.\n */\nimport { take, call, put, race, select } from 'redux-saga/effects';\nimport * as actions from './actions';\nimport { authenticate, refresh } from './functions';\nimport { delay } from 'redux-saga/effects';\nimport { accessTokenSelector } from './selectors';\n/** Saga handling the state of being logged out. */\n\nfunction* loggedOutSaga() {\n  let loginAction = yield take(actions.loginRequest);\n\n  try {\n    let login = loginAction.payload;\n    let raceResult = yield race({\n      login: call(authenticate, login.username, login.password),\n      logout: take(actions.logoutRequest)\n    });\n\n    if (raceResult.login) {\n      let accessToken = raceResult.login;\n      yield put(actions.loggedIn(accessToken));\n    } else if (raceResult.logout) {\n      yield put(actions.loggedOut());\n    }\n  } catch (error) {\n    yield put(actions.loginError(error));\n  }\n}\n/** Saga handling the state of being logged in. */\n\n\nfunction* loggedInSaga() {\n  try {\n    let raceResult = yield race({\n      logout: take(actions.logoutRequest),\n      refresh: call(refreshToken)\n    });\n\n    if (raceResult.logout) {\n      yield put(actions.loggedOut());\n    }\n  } catch (error) {\n    yield put(actions.loggedInError(error));\n    yield put(actions.loggedOut());\n  }\n}\n/** Yields a boolean result, whether there is a user logged in or not. */\n\n\nfunction* loggedIn() {\n  let accessToken = yield select(accessTokenSelector);\n  return accessToken !== undefined;\n}\n\nfunction* refreshToken() {\n  let accessToken = yield select(accessTokenSelector);\n\n  if (!accessToken) {\n    throw new Error('Not logged in');\n  }\n\n  let waitTime = accessToken.refreshAt - Date.now();\n  yield call(delay, waitTime);\n  let refreshedAccessToken = yield call(refresh, accessToken.refresh_token);\n\n  if (refreshedAccessToken) {\n    yield put(actions.loggedIn(refreshedAccessToken));\n  } else {\n    yield put(actions.loggedInError(new Error('Failed to refresh access token')));\n  }\n}\n\nexport default function* saga() {\n  while (true) {\n    let isLoggedIn = yield call(loggedIn);\n\n    if (isLoggedIn) {\n      yield call(loggedInSaga);\n    } else {\n      yield call(loggedOutSaga);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/luca/Documents/GitHub/react-redux-typescript-swagger-api-pattern/src/modules/auth/sagas.ts"],"names":["take","call","put","race","select","actions","authenticate","refresh","delay","accessTokenSelector","loggedOutSaga","loginAction","loginRequest","login","payload","raceResult","username","password","logout","logoutRequest","accessToken","loggedIn","loggedOut","error","loginError","loggedInSaga","refreshToken","loggedInError","undefined","Error","waitTime","refreshAt","Date","now","refreshedAccessToken","refresh_token","saga","isLoggedIn"],"mappings":"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","sourcesContent":["/**\n * Authentication sagas.\n * \n * Responsible for the process of logging in, refreshing tokens and logging out.\n */\n\nimport { take, call, put, race, select } from 'redux-saga/effects';\nimport * as actions from './actions';\nimport { authenticate, refresh } from './functions';\nimport { LoginRequestPayload } from './actions';\nimport { SagaIterator } from 'redux-saga';\nimport { delay } from 'redux-saga/effects';\nimport { AccessToken } from './types';\n\nimport { accessTokenSelector } from './selectors';\n\n/** Saga handling the state of being logged out. */\nfunction* loggedOutSaga(): SagaIterator {\n    let loginAction = yield take(actions.loginRequest);\n\n    try {\n        let login = loginAction.payload as LoginRequestPayload;\n        let raceResult = yield race({\n            login: call(authenticate, login.username, login.password),\n            logout: take(actions.logoutRequest),\n        });\n\n        if (raceResult.login) {\n            let accessToken = raceResult.login as AccessToken;\n\n            yield put(actions.loggedIn(accessToken));\n        } else if (raceResult.logout) {\n            yield put(actions.loggedOut());\n        }\n    } catch (error) {\n        yield put(actions.loginError(error));\n    }\n}\n\n/** Saga handling the state of being logged in. */\nfunction* loggedInSaga(): SagaIterator {\n    try {\n        let raceResult = yield race({\n            logout: take(actions.logoutRequest),\n            refresh: call(refreshToken),\n        });\n\n        if (raceResult.logout) {\n            yield put(actions.loggedOut());\n        }\n    } catch (error) {\n        yield put(actions.loggedInError(error));\n        yield put(actions.loggedOut());\n    }\n}\n\n/** Yields a boolean result, whether there is a user logged in or not. */\nfunction* loggedIn(): SagaIterator {\n    let accessToken = yield select(accessTokenSelector);\n    return accessToken !== undefined;\n}\n\nfunction* refreshToken(): SagaIterator {\n    let accessToken: AccessToken = (yield select(accessTokenSelector)) as AccessToken;\n    if (!accessToken) {\n        throw new Error('Not logged in');\n    }\n\n    let waitTime = accessToken.refreshAt - Date.now();\n    yield call(delay, waitTime);\n\n    let refreshedAccessToken = (yield call(refresh, accessToken.refresh_token)) as AccessToken;\n    if (refreshedAccessToken) {\n        yield put(actions.loggedIn(refreshedAccessToken));\n    } else {\n        yield put(actions.loggedInError(new Error('Failed to refresh access token')));\n    }\n}\n\nexport default function* saga(): SagaIterator {\n    while (true) {\n        let isLoggedIn = (yield call(loggedIn)) as boolean;\n\n        if (isLoggedIn) {\n            yield call(loggedInSaga);\n        } else {\n            yield call(loggedOutSaga);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}