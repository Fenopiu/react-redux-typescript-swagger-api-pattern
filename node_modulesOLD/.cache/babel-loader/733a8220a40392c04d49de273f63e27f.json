{"ast":null,"code":"import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\nimport { devToolsEnhancer } from 'redux-devtools-extension/logOnlyInProduction';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas';\nimport * as auth from './auth/reducer';\nimport * as petstore from './petstore/reducer';\nimport { setConfig as setAuthConfig } from './auth/functions';\n/* Import reducers from our modules */\n\nimport * as template from '../modules/template/reducer'; // import * as another from '../modules/another/reducers';\n\n/**\n * The root store state. Include sub-states for all of the modules / ducks.\n * All of these should be annotated `readonly`, as should everything down\n * the tree of StoreState interfaces, and their contents.\n */\n\n/**\n * The root reducer, combines reducers for all of the modules / ducks.\n */\nconst reducer = combineReducers({\n  template: template.reducer,\n  auth: auth.reducer,\n  petstore: petstore.reducer\n});\n/**\n * Create the redux-saga middleware.\n */\n\nconst sagaMiddleware = createSagaMiddleware();\n/**\n * Enhancers for the store.\n */\n\nconst enhancers = compose(\n/* Add the redux-saga middleware */\napplyMiddleware(sagaMiddleware),\n/* Include the devtools. Comment this out if you don't want to use the dev tools. */\ndevToolsEnhancer({}));\n/**\n * Create the store. We do not include an initial state, as each of the module / duck\n * reducers includes its own initial state.\n */\n\nexport const store = createStore(reducer, enhancers);\n/* Run the root saga */\n\nsagaMiddleware.run(rootSaga);\n/* Create the authentication config */\n\nsetAuthConfig({\n  apiBase: '/api',\n  clientId: 'test',\n  clientSecret: 'secret'\n});","map":{"version":3,"sources":["/Users/luca/Documents/GitHub/react-redux-typescript-swagger-api-pattern/src/modules/index.ts"],"names":["createStore","combineReducers","compose","applyMiddleware","devToolsEnhancer","createSagaMiddleware","rootSaga","auth","petstore","setConfig","setAuthConfig","template","reducer","sagaMiddleware","enhancers","store","run","apiBase","clientId","clientSecret"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,EAAgDC,eAAhD,QAAsF,OAAtF;AACA,SAASC,gBAAT,QAAiC,8CAAjC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,QAAP,MAAqB,SAArB;AACA,OAAO,KAAKC,IAAZ,MAAsB,gBAAtB;AACA,OAAO,KAAKC,QAAZ,MAA0B,oBAA1B;AACA,SAASC,SAAS,IAAIC,aAAtB,QAA2C,kBAA3C;AAEA;;AACA,OAAO,KAAKC,QAAZ,MAA0B,6BAA1B,C,CACA;;AAEA;;;;;;AAWA;;;AAGA,MAAMC,OAAO,GAAGX,eAAe,CAAiB;AAC5CU,EAAAA,QAAQ,EAAEA,QAAQ,CAACC,OADyB;AAE5CL,EAAAA,IAAI,EAAEA,IAAI,CAACK,OAFiC;AAG5CJ,EAAAA,QAAQ,EAAEA,QAAQ,CAACI;AAHyB,CAAjB,CAA/B;AAMA;;;;AAGA,MAAMC,cAAc,GAAGR,oBAAoB,EAA3C;AAEA;;;;AAGA,MAAMS,SAAS,GAAGZ,OAAO;AACrB;AACAC,eAAe,CAACU,cAAD,CAFM;AAGrB;AACAT,gBAAgB,CAAC,EAAD,CAJK,CAAzB;AAOA;;;;;AAIA,OAAO,MAAMW,KAAK,GAAGf,WAAW,CAAiBY,OAAjB,EAA0BE,SAA1B,CAAzB;AAEP;;AACAD,cAAc,CAACG,GAAf,CAAmBV,QAAnB;AAEA;;AACAI,aAAa,CAAC;AACVO,EAAAA,OAAO,EAAE,MADC;AAEVC,EAAAA,QAAQ,EAAE,MAFA;AAGVC,EAAAA,YAAY,EAAE;AAHJ,CAAD,CAAb","sourcesContent":["import { createStore, combineReducers, compose, applyMiddleware, StoreEnhancer } from 'redux';\nimport { devToolsEnhancer } from 'redux-devtools-extension/logOnlyInProduction';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootSaga from './sagas';\nimport * as auth from './auth/reducer';\nimport * as petstore from './petstore/reducer';\nimport { setConfig as setAuthConfig } from './auth/functions';\n\n/* Import reducers from our modules */\nimport * as template from '../modules/template/reducer';\n// import * as another from '../modules/another/reducers';\n\n/**\n * The root store state. Include sub-states for all of the modules / ducks.\n * All of these should be annotated `readonly`, as should everything down\n * the tree of StoreState interfaces, and their contents.\n */\nexport interface RootStoreState {\n    readonly template: template.StoreState;\n    readonly auth: auth.StoreState;\n    readonly petstore: petstore.StoreState;\n}\n\n/**\n * The root reducer, combines reducers for all of the modules / ducks.\n */\nconst reducer = combineReducers<RootStoreState>({\n    template: template.reducer,\n    auth: auth.reducer,\n    petstore: petstore.reducer,\n});\n\n/**\n * Create the redux-saga middleware.\n */\nconst sagaMiddleware = createSagaMiddleware();\n\n/**\n * Enhancers for the store.\n */\nconst enhancers = compose(\n    /* Add the redux-saga middleware */\n    applyMiddleware(sagaMiddleware),\n    /* Include the devtools. Comment this out if you don't want to use the dev tools. */\n    devToolsEnhancer({}),\n) as StoreEnhancer<RootStoreState>;\n\n/**\n * Create the store. We do not include an initial state, as each of the module / duck\n * reducers includes its own initial state.\n */\nexport const store = createStore<RootStoreState>(reducer, enhancers);\n\n/* Run the root saga */\nsagaMiddleware.run(rootSaga);\n\n/* Create the authentication config */\nsetAuthConfig({\n    apiBase: '/api',\n    clientId: 'test',\n    clientSecret: 'secret',\n});\n"]},"metadata":{},"sourceType":"module"}