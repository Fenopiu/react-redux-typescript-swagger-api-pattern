{"ast":null,"code":"import _objectSpread from \"/Users/luca/Documents/GitHub/react-redux-typescript-swagger-api-pattern/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { reducerWithInitialState } from 'typescript-fsa-reducers';\n/* Import our module's actions */\n\nimport * as actions from './actions';\n/**\n * Export the StoreState interface for this module. We always name this interface\n * `StoreState` so it is consistent across each of our modules.\n * All of the properties in the interface should be annotated `readonly`, as should\n * all of the properties down the tree.\n */\n\n/**\n * The initial store state for this module.\n */\nconst INITIAL_STATE = {\n  /* Note that we end each property with a comma, so we can add new properties without modifying this line\n  (improve your git diffs!).\n   */\n  name: 'React + Redux + Typescript pattern'\n};\n/**\n * Reducer function for this module.\n */\n\nexport const reducer = reducerWithInitialState(INITIAL_STATE)\n/* Reducer function for the exampleAction that returns a new state using an implicit return. */\n.case(actions.exampleAction, (state, payload) => _objectSpread({}, state, {\n  name: payload.value\n}))\n/* Reducer function for examplePrimitiveAction that returns a new state using an explicit return. */\n.case(actions.examplePrimitiveAction, (state, name) => {\n  return _objectSpread({}, state, {\n    name\n  });\n});","map":{"version":3,"sources":["/Users/luca/Documents/GitHub/react-redux-typescript-swagger-api-pattern/src/modules/template/reducer.ts"],"names":["reducerWithInitialState","actions","INITIAL_STATE","name","reducer","case","exampleAction","state","payload","value","examplePrimitiveAction"],"mappings":";AAAA,SAASA,uBAAT,QAAwC,yBAAxC;AAEA;;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AAEA;;;;;;;AAUA;;;AAGA,MAAMC,aAAyB,GAAG;AAC9B;;;AAGAC,EAAAA,IAAI,EAAE;AAJwB,CAAlC;AAOA;;;;AAGA,OAAO,MAAMC,OAAO,GAAGJ,uBAAuB,CAACE,aAAD;AAC1C;AADmB,CAElBG,IAFkB,CAEbJ,OAAO,CAACK,aAFK,EAEU,CAACC,KAAD,EAAQC,OAAR,uBACtBD,KADsB;AACfJ,EAAAA,IAAI,EAAEK,OAAO,CAACC;AADC,EAFV;AAKnB;AALmB,CAMlBJ,IANkB,CAMbJ,OAAO,CAACS,sBANK,EAMmB,CAACH,KAAD,EAAQJ,IAAR,KAAiB;AACnD,2BAAYI,KAAZ;AAAmBJ,IAAAA;AAAnB;AACH,CARkB,CAAhB","sourcesContent":["import { reducerWithInitialState } from 'typescript-fsa-reducers';\n\n/* Import our module's actions */\nimport * as actions from './actions';\n\n/**\n * Export the StoreState interface for this module. We always name this interface\n * `StoreState` so it is consistent across each of our modules.\n * All of the properties in the interface should be annotated `readonly`, as should\n * all of the properties down the tree.\n */\nexport interface StoreState {\n    readonly name: string;\n}\n\n/**\n * The initial store state for this module.\n */\nconst INITIAL_STATE: StoreState = {\n    /* Note that we end each property with a comma, so we can add new properties without modifying this line\n    (improve your git diffs!).\n     */\n    name: 'React + Redux + Typescript pattern',\n};\n\n/**\n * Reducer function for this module.\n */\nexport const reducer = reducerWithInitialState(INITIAL_STATE)\n    /* Reducer function for the exampleAction that returns a new state using an implicit return. */\n    .case(actions.exampleAction, (state, payload) => ({\n        ...state, name: payload.value\n    }))\n    /* Reducer function for examplePrimitiveAction that returns a new state using an explicit return. */\n    .case(actions.examplePrimitiveAction, (state, name) => {\n        return { ...state, name };\n    })\n    ;\n"]},"metadata":{},"sourceType":"module"}